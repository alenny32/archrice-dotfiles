# Umar's lf configuration

# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic variables
set shellopts '-eu'
set ifs "\n"
set scrolloff 8
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit on

# cmds/functions
cmd open ${{
    case "$(file --mime-type "$(readlink -f $f)" -b)" in
        "image/vnd.djvu" | \
        "application/pdf" | \
        "application/octet-stream" | \
        "application/postscript")
            setsid -f devour zathura $fx >/dev/null 2>&1
            ;;
        "text/"* | "application/json" | "inode/x-empty")
            $EDITOR $fx
            ;;
        "image/x-xcf")
            ifinstalled "gimp" || exit 1
            setsid -f gimp $f >/dev/null 2>&1
            ;;
        "image/svg+xml")
            # devour display -- "$f"
            devour sxiv "$f"
            ;;
        "image/"*)
            rotdir $f |
                grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
                setsid -f devour sxiv -aio 2>/dev/null |
                while read -r file; do
                    [ -z "$file" ] && continue
                    lf -remote "send select \"$file\""
                    lf -remote "send toggle"
                done &
            ;;
        "audio/"*)
            devour mpv --audio-display=no $f
            ;;
        "video/"* | \
        "application/vnd.rn-realmedia")
            setsid -f devour mpv $f -quiet >/dev/null 2>&1
            ;;
        "application/"*"zip" | \
        "application/x-7z-compressed")
            setsid -f devour 7zFM $f >/dev/null 2>&1
            ;;
        "application/pdf" | \
        "application/vnd.djvu" | \
        "application/epub*")
            setsid -f devour zathura $fx >/dev/null 2>&1
            ;;
        "application/pgp-encrypted")
            $EDITOR $fx
            ;;
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | \
        "application/vnd.oasis.opendocument.text")
            setsid -f devour lowriter $fx >/dev/null 2>&1
            ;;
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | \
        "application/vnd.oasis.opendocument.spreadsheet" | \
        "application/vnd.oasis.opendocument.spreadsheet-template")
        # "application/octet-stream" | \
            setsid -f devour localc $fx >/dev/null 2>&1
            ;;
        "application/vnd.openxmlformats-officedocument.presentationml.presentation" | \
        "application/vnd.oasis.opendocument.presentation-template" | \
        "application/vnd.oasis.opendocument.presentation" | \
        "application/vnd.ms-powerpoint")
            setsid -f devour loimpress $fx >/dev/null 2>&1
            ;;
        "application/vnd.oasis.opendocument.graphics" | \
        "application/vnd.oasis.opendocument.graphics-template")
            setsid -f devour lodraw $fx >/dev/null 2>&1
            ;;
        "application/vnd.oasis.opendocument.formula")
            setsid -f devour lomath $fx >/dev/null 2>&1
            ;;
        "application/vnd.oasis.opendocument.database")
            setsid -f devour lobase $fx >/dev/null 2>&1
            ;;
        *)
            for f in $fx; do
                setsid -f $OPENER $f >/dev/null 2>&1
            done
            ;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Trash bindings
cmd trash_restore ${{
    ifinstalled "trash-cli" ||
        exit 1

    clear -x; tput cup "$(($(tput lines)/3))"; tput bold
    printf "Trash restore:\n"; tput sgr0
    trash-restore
}}

cmd trash_put ${{
    ifinstalled "trash-cli" ||
        exit 1

    clear -x; tput cup "$(($(tput lines)/3))"; tput bold
    printf "\tTrash put:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Trash? [y/N] "
    read ans
    [ "$ans" = "y" ] && trash-put -- $fx

    # files="$(printf "$fx" | tr '\n' ';')"
    # while [ "$files" ]; do
    #   file=${files%%;*}
    #   trash-put "$(basename "$file")"
    #   if [ "$files" = "$file" ]; then
    #     files=''
    #   else
    #     files="${files#*;}"
    #   fi
    # done
}}

cmd extract ${{
    clear -x; tput cup "$(($(tput lines)/3))" ; tput bold
    printf "\tExtract files:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Extract? [y/N] "
    read ans ; tput sgr0
    if [ "$ans" = "y" ]; then
        for file in $fx; do
            aunpack $file
        done
    fi
}}

cmd archive ${{
    clear -x; tput cup "$(($(tput lines)/3))" ; tput bold
    printf "\tArchive files (7z):\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Archive name (empty to cancel): "
    read archive_name ; tput sgr0

    [ -z "$archive_name" ] &&
        return

    7z a "${archive_name}.7z" $fx
}}

cmd delete ${{
    clear -x; tput cup "$(($(tput lines)/3))" ; tput bold
    printf "\tDelete:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx"; tput bold
    printf "Delete? [y/N] "
    read ans ; tput sgr0
    [ "$ans" = "y" ] && rm -rf -- $fx
}}

cmd delete_secure ${{
    clear -x; tput cup "$(($(tput lines)/3))" ; tput bold
    printf "\tSecure delete:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Securely delete? [y/N] "
    read ans ; tput sgr0
    [ "$ans" = "y" ] && srm -r -- $fx
}}

cmd paste_overwrite ${{
    ifinstalled "rsync" ||
        exit 1

    set -f
    selected_files="${XDG_DATA_HOME:-$HOME/.local/share}/lf/files"
    mode="$(head -1 ${selected_files})"
    list="$(sed 1d ${selected_files})"
    set -- _ $list; shift

    [ "$#" -le 0 ] &&
        exit

    case "$mode" in
        "copy")
            rsync -urP --delete-after "$@" ./
            ;;
        "move")
            rsync -urP --delete-after --remove-source-files "$@" ./
            lf -remote "send clear"
            ;;
    esac

    # lf -remote 'save\nmove\n'
    lf -remote "send $id load"
    lf -remote "send $id echo \"\033[0;32mPasted $# file(s)\033[0m\""
}}

cmd moveto ${{
    clear -x; tput bold
    set -f
    echo "Move to where?"
    destination="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')"

    if [ "$1" = "interactive" ]; then
        for file in $fx; do
        # eval mv -iv \"$file\" \"$destination\"
        mv -iv "$file" "$destination"
        done
    elif [ "$1" = "overwrite" ]; then
        ifinstalled "rsync" ||
            exit 1
        for file in $fx; do
            rsync -urP --delete-after --remove-source-files"$file" "$destination"
        done
    fi

    notify-send -a "lf-moveto" -u "low" -i "bell" \
        "ðŸšš File(s) moved." \
        "File(s) moved to $destination."
}}

cmd copyto ${{
    clear -x; tput bold
    set -f
    echo "Copy to where?"
    destination="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')"

    if [ "$1" = "interactive" ]; then
        for file in $fx; do
            # eval cp -ivr \"$file\" \"$destination\"
            cp -ivr "$file" "$destination"
        done
    elif [ "$1" = "overwrite" ]; then
        ifinstalled "rsync" ||
            exit 1
        for file in $fx; do
            rsync -urP --delete-after "$file" "$destination"
        done
    fi

    notify-send -a "lf-copyto" -u "low" \
        "ðŸ“‹ File(s) copied." \
        "File(s) copied to $destination."
}}

cmd mime_ask ${{
    clear -x; tput cup "$(($(tput lines)/3))"
    mimeopen --ask "$f"
}}

cmd gen_preview ${{
    case "$(file -bh --mime-type -- "$fx")" in
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            docx2txt $fx
            ;;
        "application/vnd.oasis.opendocument.text")
            base="${file%.*}"
            odt2txt $fx > "${fx}.txt"
            ;;
        "application/pdf")
            pdftotext $fx
            ;;
    esac
}}

cmd setbg "$1"
cmd bulkrename $vidir

# Template copying commands
# cmd cp-temp-latex ${{
#     clear -x; tput cup "$(($(tput lines)/3))"; tput bold
#     set -f
#     printf "%s\n\t" "$fx"
#     printf "Copying LaTeX template...\n"
#     printf "New file name (without extension): "
#     read ans
#     cp ${XDG_TEMPLATES_DIR:-$HOME/Templates}/LaTeX.tex $ans.tex
# }}

cmd confirm_gpg ${{
    user_id="$1"
    clear -x; tput cup "$(($(tput lines)/3))"; tput bold
    printf "\tGPG Encrypt/Decrypt"
    [ "$user_id" = "umar" ] &&
        printf " using Umar's key"; printf ":\n"; tput sgr0
    set -f
    printf "%s\n" "$fx"; tput bold
    if [ "$user_id" = "prompt" ]; then
        printf "\tEnter reciepient's GPG key user id (email or name): "
        read gpg_user_id
        user_id="$gpg_user_id"
    fi
    printf "\tEncrypt/Decrypt? [y/N] "
    read ans ; printf "\n"; tput sgr0
    [ "$ans" = "y" ] &&
        gpg-ed "$user_id" $fx
}}

# Bindings
    map <c-f> $lf -remote "send $id select \"$(fzf)\""
    map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"

# Basic
    map zc clear
    map <c-r> reload
    map . set hidden!
    map <enter> shell
    # map <c-s> set hidden!
    # map <c-h> set hidden!

# Unbind default key bindings
    # map <c-m> # unbinds enter too?!
    # map <c-M>

# Function
    map Z archive
    map D delete
    map S delete_secure
    map EE extract
    map CC copyto "interactive"
    map CO copyto "overwrite"
    map M
    map MM moveto "interactive"
    map MO moveto "overwrite"
    map P gen_preview
    map T trash_put
    map <delete> trash_put
    map R trash_restore
    map p
    map pp paste
    map po paste_overwrite

# Movement
    map gg top
    map gh cd ~
    map gd cd ~/Documents
    map gD cd ~/Downloads
    map gp cd ~/Pictures
    map gP cd ~/Public
    map gc cd ~/.config
    map gr cd ~/Repos
    map gv cd ~/Videos
    map gs cd ~/.local/bin
    map gt cd ~/.local/share/Trash/files
    map <c-e> down
    map <c-y> up

# New
    map <c-n> push :mkdir<space>
    map V push $nvim<space>
    # map Tt push $touch<space>

# Shell
    map x $$f
    map X !$f
    map o &mimeopen "$f"
    map O mime_ask
    map b &setbg $f
    map W $setsid -f "$TERMINAL" >/dev/null 2>&1
    map Y $printf "%s" "$fx" | xclip -selection clipboard

# Open app
    map <c-v>f &code "$fx"
    map <c-v>v &code .
    map e # open with editor
    map ed $"$EDITOR" "$fx"
    map ef &devour thunar "$fx"
    map ee &devour thunar .
    map <a-m>m &devour mpv --no-terminal "$f/*.mp4"
    map <a-m>M &devour mpv --no-terminal "$f"
    map <a-m>, push &devour<space>mpv<space>--no-terminal<space>"$f/*."<space>&<left><left><left>

# Rename
    map A rename # at the very end
    map c push A<c-u> # new rename
    map I push A<c-a> # at the very beginning
    map i push A<a-b><a-b><a-f> # before extension
    map a push A<a-b> # after extension
    map B bulkrename

# GPG
    map <c-g> confirm_gpg umar
    map <a-g> confirm_gpg prompt
    map <a-G> confirm_gpg unspecified

# Copy template
    # LaTeX
        # map TTl push $cp<space>${XDG_TEMPLATES_DIR:-$HOME/Templates}/LaTeX.tex<space>.tex<left><left><left><left>

# Source Bookmarks
    source "~/.config/lf/shortcutrc"

# vim:ft=config
