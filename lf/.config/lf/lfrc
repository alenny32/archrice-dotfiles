# Umar's lf settings (nyolong)


# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 8
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit on

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) devour localc $fx ;;
    image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f devour zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty) $EDITOR $fx;;
    image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/svg+xml) display -- $f ;;
    image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
        setsid -f devour sxiv -aio 2>/dev/null | while read -r file; do
            [ -z "$file" ] && continue
            lf -remote "send select \"$file\""
            lf -remote "send toggle"
        done &
        ;;
    audio/*) devour mpv --audio-display=no $f ;;
    video/*|application/vnd.rn-realmedia) setsid -f devour mpv $f -quiet >/dev/null 2>&1 ;;
    application/zip|application/x-7z-compressed) setsid -f devour 7zFM $f >/dev/null 2>&1 ;;
    application/pdf|application/vnd.djvu|application/epub*) setsid -f devour zathura $fx >/dev/null 2>&1 ;;
    application/pgp-encrypted) $EDITOR $fx ;;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f devour lowriter $fx >/dev/null 2>&1 ;;
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f devour localc $fx >/dev/null 2>&1 ;;
    application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f devour loimpress $fx >/dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f devour lodraw $fx >/dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.formula) setsid -f devour lomath $fx >/dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.database) setsid -f devour lobase $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done ;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Trash bindings
cmd trash_restore ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    trash-restore
}}

cmd trash_put ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "trash? [y/N] "
    read ans
    [ $ans = "y" ] &&

    files=$(printf "$fx" | tr '\n' ';')
    while [ "$files" ]; do
      file=${files%%;*}

      trash-put "$(basename "$file")"
      if [ "$files" = "$file" ]; then
        files=''
      else
        files="${files#*;}"
      fi
    done
}}

cmd extract ${{
    clear; tput cup $(($(tput lines)/3)) ; tput bold
    printf "\tExtract files:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Extract? [y/N] "
    read ans ; tput sgr0
    [ $ans = "y" ] && aunpack $fx
}}

cmd archive ${{
    clear; tput cup $(($(tput lines)/3)) ; tput bold
    printf "\tArchive files (7z):\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Archive name: "
    read name ; tput sgr0
    7z a "${name}.7z" $fx
}}

cmd delete ${{
    clear; tput cup $(($(tput lines)/3)) ; tput bold
    printf "\tDelete files:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx"; tput bold
    printf "Delete? [y/N] "
    read ans ; tput sgr0
    [ $ans = "y" ] && rm -rf -- $fx
}}

cmd delete_secure ${{
    clear; tput cup $(($(tput lines)/3)) ; tput bold
    printf "\tSecure delete files:\n" ; tput sgr0
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "Securely delete? [y/N] "
    read ans ; tput sgr0
    [ $ans = "y" ] && srm -r -- $fx
}}

cmd moveto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Move to where?"
    dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
    for x in $fx; do
        eval mv -iv \"$x\" \"$dest\"
    done &&
    notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Copy to where?"
    dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
    for x in $fx; do
        eval cp -ivr \"$x\" \"$dest\"
    done &&
    notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd mime_ask ${{
    clear; tput cup $(($(tput lines)/3))
    mimeopen --ask "$f"
}}

cmd gen_preview ${{
    case "$(file --dereference --brief --mime-type -- "$fx")" in
        application/vnd.openxmlformats-officedocument.wordprocessingml.document) docx2txt "$fx" ;;
        application/vnd.oasis.opendocument.text) odt2txt "$fx" > "$fx.txt";;
    esac
}}

cmd setbg "$1"
cmd bulkrename $vidir

# Template copying commands
# cmd cp-temp-latex ${{
#     clear; tput cup $(($(tput lines)/3)); tput bold
#     set -f
#     printf "%s\n\t" "$fx"
#     printf "Copying LaTeX template...\n"
#     printf "New file name (without extension): "
#     read ans
#     cp ${XDG_TEMPLATES_DIR:-$HOME/Templates}/LaTeX.tex $ans.tex
# }}
cmd confirm_gpg ${{
    clear; tput cup $(($(tput lines)/3))
    set -f
    printf "%s\n\t" "$fx" ; tput bold
    printf "GPG Encrypt/Decrypt? [y/N] " ; tput sgr0
    read ans
    [ $ans = "y" ] && gpg-ed $1 $fx
}}

# Bindings
    map <c-f> $lf -remote "send $id select \"$(fzf)\""
    map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"

# Basic
    map zc clear
    map <c-r> reload
    map <c-s> set hidden!
    map <enter> shell

# Unbind default key bindings
    # map <c-m>
    # map <c-M>

# Function
    map Z archive
    map D delete
    map S delete_secure
    map E extract
    map C copyto
    map M moveto
    map P gen_preview
    map T trash_put
    map R trash_restore

# Movement
    map gg top
    map gh cd ~
    map gd cd ~/Documents
    map gD cd ~/Downloads
    map gp cd ~/Pictures
    map gP cd ~/Public
    map gc cd ~/.config
    map gr cd ~/Repos
    map gv cd ~/Videos
    map gs cd ~/.local/bin
    map gt cd ~/.local/share/Trash/files
    map <c-e> down
    map <c-y> up

# New
    map <c-n> push :mkdir<space>
    map V push $nvim<space>
    # map Tt push $touch<space>

# Shell
    map x $$f
    map X !$f
    map o &mimeopen "$f"
    map O mime_ask
    map b $setbg $f &
    map W $setsid -f $TERMINAL >/dev/null 2>&1
    map Y $printf "%s" "$fx" | xclip -selection clipboard

# Open app
    map <c-v>f $code "$fx" &
    map <c-v>v $code . &
    map e
    map ef $devour thunar "$fx" &
    map ee $devour thunar . &
    map <a-m>m $devour mpv --no-terminal "$f/*.mp4" &
    map <a-m>M $devour mpv --no-terminal "$f" &
    map <a-m>, push $devour<space>mpv<space>--no-terminal<space>"$f/*."<space>&<left><left><left>

# Rename
    map A rename # at the very end
    map c push A<c-u> # new rename
    map I push A<c-a> # at the very beginning
    map i push A<a-b><a-b><a-f> # before extension
    map a push A<a-b> # after extension
    map B bulkrename

# gpg
    map <c-g>g confirm_gpg umar
    map <c-g>u confirm_gpg unspecified

# Copy template
    # LaTeX
        # map TTl push $cp<space>${XDG_TEMPLATES_DIR:-$HOME/Templates}/LaTeX.tex<space>.tex<left><left><left><left>

# Source Bookmarks
    # source "~/.config/lf/shortcutrc"

# vim:ft=config
