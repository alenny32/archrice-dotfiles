#! /bin/sh

# programs
SCREENSHOT_PROGRAM="scrot"
CLIPBOARD_PROGRAM="xclip"
# PROMPT_PROGRAM="dmenu"

# source Xresources colors
[ -f "${XDG_DATA_HOME:-${HOME}/.local/share}/xcolors" ] || \
    gen-xcolors
. "${XDG_DATA_HOME:-${HOME}/.local/share}/xcolors"

# check if program is installed
ifinstalled ${SCREENSHOT_PROGRAM} ${CLIPBOARD_PROGRAM} || \
    exit

# screenshot configuration
datetime_format="$(date +'%Y-%m-%d-%T')"
filename="${datetime_format}-screenshot.png"
output="${XDG_PICTURES_DIR:-$HOME/Pictures}/screenshots/$filename"
image_quality=95
temp_dir="/tmp/screenshots"
# filename="%Y-%m-%d-%T-screenshot.png"

# dmenu configuration
dmenu_options="-i -nb "${color0}" -nf "${color3}" -sb "${color3}""
dmenu_prompt="dmenu $dmenu_options -p"
dmenu_prompt_msg="Select screenshot type:"

# clipboard configuration
xclip_cmd="xclip -selection clipboard -t image/png -i $output"
# xclip_cmd="'xclip -selection clipboard -t image/png -i $f'"

# if screenshot folder does not exist in pictures directory, then make directory
[ ! -d "${XDG_PICTURES_DIR:-$HOME/Pictures}/screenshots" ] && \
    mkdir -p "${XDG_PICTURES_DIR:-$HOME/Pictures}/screenshots"

# pick which type of screenshot
case "$1" in
    "selection")
        scrot "$output" --select --line mode=edge --quality "${image_quality}" \
            --exec "${xclip_cmd}" || \
            exit
        ;;
    "window")
        scrot "$output" --focused --quality "${image_quality}" \
            --exec "${xclip_cmd}" || \
            exit
        ;;
    "fullscreen")
        scrot "$output" --quality "${image_quality}" \
            --exec "${xclip_cmd}" || \
            exit
        ;;
    "temp")
        [ -d "$temp_dir" ] || \
            mkdir "$temp_dir"
        output="$temp_dir/$filename"
        xclip_cmd="xclip -selection clipboard -t image/png -i $output"

        scrot "$output" --select --line mode=edge --quality "${image_quality}" \
            --exec "${xclip_cmd}" || \
            exit
        ;;
    *)
        case "$(printf "\
selection\\n\
window\\n\
full screen\\n\
temp\\n" \
            | ${dmenu_prompt} "$dmenu_prompt_msg")" in
                "selection")
                    screenshot "selection"
                    ;;
                "window")
                    screenshot "window"
                    ;;
                "full screen")
                    screenshot "fullscreen"
                    ;;
                "temp")
                    screenshot "temp"
                    ;;
        esac
        exit
        ;;
esac

# notify screenshot success or fail
[ -f "$output" ] && \
    notify-send "Screenshot taken" -u low -a "screenshot" -i "$output" -t 3000 || \
    notify-send "Screenshot cancelled" -u normal -a "screenshot" -i "warning" -t 6000
